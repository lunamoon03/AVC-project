bool quadrantChangeDetector() {
    /**
     * This function counts the number of red pixels
     * If there are enough red pixels it returns true
     * All other cases false
    */
    take_picture();
    int count = 0;
    const int MIN_REQ_RED = 0;
    for (int col = 0; col < 320; col++){
        if (isRed(120, col)) count++;
    }
    if (count <= MIN_REQ_RED) return false;
    return true;
}

void findBoundingBox(int* boundingBox) {
    /**
     * Takes a Reference (Might need to be a pointer) to an array of ints. And changes the values to represent the bounding box of black lines
     * The array should have four elements in it.
    */
    int leftMostBlack = 400;
    int rightMostBlack = -100;
    int topMostBlack = 400;
    int bottomMostBlack = 0;
    take_picture();
    for (int row = 0; row <240; row++){
        for (int col = 0; col < 320; col++){
            if (isBlack(row, col)) {
                // Update the bounding box based on the location of the pixels
                if (leftMostBlack > col) leftMostBlack = col;
                if (rightMostBlack < col) rightMostBlack = col;
                if (topMostBlack > row) topMostBlack = row;
                if (bottomMostBlack < row) bottomMostBlack = row;
            }
        }
    }
    // Update the array with the bounding box
    boundingBox[0] = leftMostBlack;
    boundingBox[1] = rightMostBlack;
    boundingBox[2] = topMostBlack;
    boundingBox[3] = bottomMostBlack;
}

void branchingPathDetection(bool* directions){
    /**
     * Takes a reference to an array of strings.
     * Gets the bounding box and determines what directions can be moved in
     * Then updates the array of strings with that.
     * This function expects the robot to be aligned with the path
     * Directions 0 is left, 1 is forward, 2 is right
    */
    int boundingBox[4];
    findBoundingBox(boundingBox);
    std::cout<<"Leftmost: "<< boundingBox[0] <<"Rightmost: "<<boundingBox[1]<<"topMost: "<<boundingBox[2]<<"bottomMost"<<boundingBox[3]<<std::endl;
    if (boundingBox[0] < 5) directions[0] = true;
    if (boundingBox[1] > 315) directions[2] = true;
    if (boundingBox[2] < 5) directions[1] = true;

}

void quad3Turn(int direction){
    /**
     * This function handles turning in quadrant 3.
     * It takes the direction to turn in as an int where 0 is left and 1 is right.
     * Then it turns in that direction until a white pixel is in the center of the screen.
     * Then it stops turning when a black pixel is detected.
     * After this function is called the robot needs to be centered somehow
    */
    while(isBlack(120, 160)){
        if (direction == 0){
            set_motors(1, 42);
            set_motors(5, 42);
        } else {
            set_motors(1, 54);
            set_motors(5, 54);
        }
        hardware_exchange();
    }
    while (!isBlack(120, 160)){
        if (direction == 0){
            set_motors(1, 42);
            set_motors(5, 42);
        } else {
            set_motors(1, 54);
            set_motors(5, 54);
        }

        hardware_exchange();
    }
    // Stop movement
    // left motor
    set_motors(1, 48);
    // right motor
    set_motors(5, 48);
    hardware_exchange();
}

void quad3(){
    /**
     * Function to navigate the robot through quadrant 3.
     * Should keep calling branching path detection.
     * When it reaches a branching path it should prioritise turning left, then straight, then right.
     *
     *
    */
    // I SHOULD OF USED CONSTANTS IM SORRY
    // Will require to not be on the change from the previous quadrant too work.
    // Should probably just move forward a bit before this happens
    // Keep going forward until fully past the previous quadrant change detector
    forward();
    std::vector<int> line;
    int blackPixelCount;
    // using an int for speed
    int error;
    const int error_range= 5;

    std::cout<<"Past the quadrant change"<<std::endl;
    sleep(1);
    while (!quadrantChangeDetector()){
        bool directions[3];
        branchingPathDetection(directions);
        std::cout<<"Avaliable directions:";
        if (directions[0]) {std::cout<<" left ";}
        if (directions[1]) {std::cout<<" forward ";}
        if (directions[2]) {std::cout<<" right ";}
        std::cout<<std::endl;
        if (directions[0]){
            std::cout<<"Going left"<<std::endl;
            // Do stuff to turn left
            // Keep going forward until the camera can no longer see left
            while(directions[0]){
                forward();
                branchingPathDetection(directions);
            }
            std::cout<<"Initiating left turn"<<std::endl;
            quad3Turn(0);
        } else if (directions[1]){
            std::cout<<"Going forwards"<<std::endl;
            // go forwards
            // Will need to center somehow
            // Centering somehow
            line.clear();
            take_picture();
            //unused here
            int redPixelCount = 0;
            blackPixelCount = read_middle_line(line, redPixelCount);
            error = calc_error(line)/blackPixelCount;
            while (!(error > -(error_range) && error < error_range)){
                blackPixelCount = read_middle_line(line, redPixelCount);
                error = calculate_error(line)/blackPixelCount;
                if (error < 0){
                    // Turn right
                    set_motors(1, 54);
                    set_motors(5, 54);
                } else {
                    // Turn left
                    set_motors(1, 42);
                    set_motors(5, 42);
                }
                hardware_exchange();
            }


            forward();
        } else if (directions[2]){
            std::cout<<"Going right"<<std::endl;
            // Do stuff to turn right
            while(directions[2]){
                forward();
                branchingPathDetection(directions);
            }
            std::cout<<"Initiating right turn"<<std::endl;
            quad3Turn(1);
        } else {
            // When in doubt turn left
            std::cout<<"Going left"<<std::endl;
            quad3Turn(0);
        }
        hardware_exchange();
    }
    std::cout<<"past while loop"<<std::endl;
}